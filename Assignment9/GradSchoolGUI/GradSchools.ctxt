#BlueJ class context
comment0.target=GradSchools
comment0.text=\ Defines\ a\ class\ for\ maintaining\ an\ array\ of\ School\ objects\n\ @author\ Takis\ Metaxas,\ based\ on\ previous\ assignment\ solutions\n\ @version\ 2018.11.16\n\ KNOWN\ BUGS\:\ 1.\ There\ is\ no\ limiting\ the\ weights\ in\ the\ [1..5]\ range.\ \n\ 2.\ No\ other\ bug.\ Likely\ I\ did\ not\ test\ hard\ enough.\n\ FEATURE\:-)\ It\ uses\ its\ own\ selection\ sorting\ method,\ and\ this\ can\ be\ slow\ \n\ for\ large\ collections\ of\ Schools.\ Better\ to\ have\ flexibility.\n
comment1.params=
comment1.target=GradSchools()
comment1.text=\ constructors\n\ \ \ --------------------------------------------------------------\n
comment10.params=i\ j
comment10.target=void\ swap(int,\ int)
comment10.text=\ Helper\ method\ for\ sortSchools();\ swaps\ the\ contents\ of\ schools[i]\ and\ schools[j]\n
comment11.params=
comment11.target=School\ getTop()
comment11.text=\ instance\ method\ to\ return\ the\ last\ School\ in\ the\ collection.\ When\ sorted,\ \n\ this\ should\ be\ the\ one\ with\ the\ maximum\ rank\ (the\ "top"\ school)\ in\ this\ category\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\ Driver\ code\ for\ testing\ the\ methods\ defined\ in\ the\n\ GradSchools\ class\ for\ maintaining\ an\ array\ of\ School\ objects\n\ \ \ \ \ \ --------------------------------------------------------------\n
comment2.params=size
comment2.target=GradSchools(int)
comment3.params=name\ Academics\ Research\ pubs
comment3.target=void\ addSchool(java.lang.String,\ int,\ int,\ int)
comment3.text=\ instance\ method\ to\ add\ a\ new\ School\ object\ to\ the\ schools\ array\n\ \ \ \ \ --------------------------------------------------------------\n
comment4.params=
comment4.target=void\ doubleSize()
comment4.text=\ \ Increases\ the\ capacity\ of\ the\ school\ array\ by\ creating\ a\n\ \ larger\ array\ and\ copying\ the\ existing\ collection\ into\ it.\n\ \ \ \ \ \ --------------------------------------------------------------\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\ instance\ method\ that\ prints\ information\ about\ all\ of\ the\ School\ objects\n\ in\ the\ schools\ array\n\ \ \ \ --------------------------------------------------------------\n
comment6.params=weightAcademics\ weightResearch\ weightPubs
comment6.target=void\ computeRatings(int,\ int,\ int)
comment6.text=\ instance\ method\ that\ computes\ overallRating\ for\ each\ School\ object\n\ \ \ \ \ --------------------------------------------------------------\n
comment7.params=factor
comment7.target=void\ rankSchools(java.lang.String)
comment7.text=\ instance\ method\ that\ rank\ orders\ the\ School\ objects\ in\ the\ schools\n\ array,\ either\ by\ a\ single\ factor\ or\ the\ overallRating\ as\ specified\n\ by\ an\ input\ String,\ and\ prints\ the\ names\ of\ the\ schools\ in\ order\n\ from\ highest\ to\ lowest\ rank\n\ \ \ \ \ \ --------------------------------------------------------------\n
comment8.params=factor
comment8.target=void\ displayRankResults(java.lang.String)
comment8.text=\ to\ display\ the\ rank\ results.\ Better\ have\ it\ separately\ than\ the\ rankSchools\ \n\ \ so\ that\ rankSchools\ can\ be\ used\ independently.\n\ \ \ \ \ --------------------------------------------------------------\n
comment9.params=
comment9.target=void\ sortSchools()
comment9.text=\ instance\ method\ that\ sorts\ the\ School\ objects\ in\ the\ schools\ array\ in\ \n\ order\ of\ increasing\ rankValue\n\ Sorting\ strategy\ for\ original\ sortArray()\ method\:\n\ The\ sorting\ strategy\ used\ here\ is\ called\ "selection\ sort".\ Suppose\ \n\ arrayA\ contains\ n\ numbers\ to\ be\ sorted,\ in\ indices\ from\ 0\ to\ n-1.\ \n\ First,\ the\ algorithm\ finds\ the\ largest\ number\ in\ the\ array\ and\ \n\ places\ it\ at\ index\ n-1.\ Then\ it\ locates\ the\ second\ largest\ number,\ \n\ in\ indices\ 0\ to\ n-2,\ and\ places\ this\ number\ at\ index\ n-2.\ Then\ the\ \n\ third\ largest\ number\ is\ found\ in\ indices\ 0\ to\ n-3,\ and\ placed\ at\ \n\ index\ n-3,\ and\ so\ on,\ until\ all\ n\ numbers\ are\ sorted.\ \n\ \ \ \ \ \ --------------------------------------------------------------\n
numComments=13
