#BlueJ class context
comment0.target=GenealogyTree
comment1.params=
comment1.target=GenealogyTree()
comment10.params=target\ rchild
comment10.target=void\ setMater(java.lang.Object,\ java.lang.Object)
comment10.text=\n\ Sets\ the\ right\ child\ of\ target\ to\ rchild.\n\ It\ throws\ an\ exception\ if\ target\ is\ not\ already\ in\ the\ tree.\n
comment11.params=target
comment11.target=boolean\ appears(java.lang.Object)
comment11.text=\n\ Returns\ true\ if\ the\ tree\ contains\ an\ element\ that\n\ matches\ the\ specified\ target\ element\ and\ false\ otherwise.\n
comment12.params=gp1\ gp2
comment12.target=boolean\ inLaws(java.lang.Object,\ java.lang.Object)
comment12.text=\n\ Returns\ true\ if\ the\ two\ members\ share\ a\ grandchild,\n\ and\ false\ if\ they\ are\ not\ or\ if\ a\ shared\ grandchild\ does\ not\ exist\n\ Two\ grandparents\ that\ share\ a\ grandchild\ are\ "inLaws"\n
comment13.params=
comment13.target=int\ size()
comment13.text=\n\ Returns\ the\ number\ of\ members\ in\ this\ ancestral\ tree.\n
comment14.params=
comment14.target=java.lang.String\ toString()
comment14.text=\n\ Returns\ the\ string\ representation\ of\ the\ binary\ tree,\n\ one\ line\ per\ level.\n
comment15.params=
comment15.target=java.util.Iterator\ iterator()
comment16.params=
comment16.target=java.util.Iterator\ byGenerations()
comment16.text=\n\ Returns\ an\ iterator\ that\ contains\ a\ level-order\ traversal\n\ on\ the\ ancestral\ tree.\ \n
comment17.params=args
comment17.target=void\ main(java.lang.String[])
comment2.params=element
comment2.target=GenealogyTree(java.lang.Object)
comment2.text=\n\ Creates\ a\ binary\ tree\ with\ the\ specified\ element\ as\ its\ root.\n
comment3.params=
comment3.target=java.lang.Object\ getCoTU()
comment3.text=\n\ Returns\ the\ element\ stored\ in\ the\ root\ (aka\ CoTU)\ of\ the\ tree.\n
comment4.params=target
comment4.target=java.lang.Object\ getOffspring(java.lang.Object)
comment4.text=\n\ Returns\ the\ member\ that\ is\ the\ offspring\ of\ target.\n\ Returns\ null\ as\ the\ offspring\ of\ the\ root.\n
comment5.params=target
comment5.target=java.lang.Object\ getPater(java.lang.Object)
comment5.text=\n\ Returns\ the\ member\ that\ is\ the\ left\ child\ of\ target.\n\ Returns\ null\ if\ the\ left\ child\ does\ not\ exist.\n
comment6.params=target
comment6.target=int\ findTarget(java.lang.Object)
comment6.text=\n\ Helper\ method\ to\ find\ index\ of\ target.\n
comment7.params=
comment7.target=void\ expandCapacity()
comment7.text=\n\ \ Helper\ method.\ \n\ \ Creates\ a\ new\ array\ to\ store\ the\ contents\ of\ this\ stack\ with\n\ \ twice\ the\ capacity\ of\ the\ old\ one.\n
comment8.params=target\ lchild
comment8.target=void\ setPater(java.lang.Object,\ java.lang.Object)
comment8.text=\n\ Sets\ the\ left\ child\ of\ the\ tree\ target\ to\ lchild.\n\ It\ throws\ an\ exception\ if\ target\ is\ not\ already\ in\ the\ tree\n
comment9.params=target
comment9.target=java.lang.Object\ getMater(java.lang.Object)
comment9.text=\n\ Returns\ the\ element\ that\ is\ the\ right\ child\ of\ target.\n\ Returns\ null\ if\ the\ right\ child\ does\ not\ exist.\n
numComments=18
