#BlueJ class context
comment0.target=LinkedTernaryTree
comment1.params=
comment1.target=LinkedTernaryTree()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ LinkedTernaryTree\n
comment10.params=
comment10.target=LinkedTernaryTree\ getChoiceC()
comment10.text=\n\ Returns\ the\ choiceC\ subtree\ of\ the\ root\ of\ this\ tree.\n
comment11.params=target
comment11.target=boolean\ contains(java.lang.Object)
comment11.text=\n\ Returns\ true\ if\ the\ ternary\ tree\ contains\ an\ element\ that\n\ matches\ the\ specified\ element\ and\ false\ otherwise.\n
comment12.params=target
comment12.target=java.lang.Object\ find(java.lang.Object)
comment12.text=\n\ Returns\ the\ element\ in\ this\ ternary\ tree\ that\ matches\ the\n\ specified\ target.\ Throws\ a\ ElementNotFoundException\ if\ the\n\ target\ is\ not\ found.\n
comment13.params=
comment13.target=boolean\ isEmpty()
comment13.text=\n\ Returns\ true\ if\ the\ ternary\ tree\ contains\ no\ elements,\ and\n\ false\ otherwise.\n
comment14.params=
comment14.target=int\ size()
comment14.text=\n\ Returns\ the\ number\ of\ elements\ in\ this\ ternary\ tree.\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\n\ Returns\ the\ string\ representation\ of\ the\ ternary\ tree.\n
comment16.params=
comment16.target=java.util.Iterator\ iterator()
comment16.text=\n\ Satisfies\ the\ Iterable\ interface\ using\ an\ inorder\ traversal.\n
comment17.params=
comment17.target=java.util.Iterator\ preorder()
comment17.text=\n\ Populates\ and\ returns\ an\ iterator\ containing\ the\ elements\ in\n\ this\ ternary\ tree\ using\ an\ preorder\ traversal.\n
comment18.params=
comment18.target=java.util.Iterator\ inorder()
comment18.text=\n\ Populates\ and\ returns\ an\ iterator\ containing\ the\ elements\ in\n\ this\ ternary\ tree\ using\ an\ inorder\ traversal.\n
comment19.params=
comment19.target=java.util.Iterator\ postorder()
comment19.text=\n\ Populates\ and\ returns\ an\ iterator\ containing\ the\ elements\ in\n\ this\ ternary\ tree\ using\ an\ postorder\ traversal.\n
comment2.params=element
comment2.target=LinkedTernaryTree(java.lang.Object)
comment2.text=\n\ Creates\ a\ ternary\ tree\ with\ the\ specified\ element\ as\ its\ root.\n
comment20.params=
comment20.target=java.util.Iterator\ levelorder()
comment20.text=\n\ Populates\ and\ returns\ an\ iterator\ containing\ the\ elements\ in\n\ this\ ternary\ tree\ using\ an\ levelorder\ traversal.\n
comment3.params=element\ left\ middle\ right\ choiceA\ choiceB\ choiceC
comment3.target=LinkedTernaryTree(java.lang.Object,\ LinkedTernaryTree,\ LinkedTernaryTree,\ LinkedTernaryTree,\ LinkedTernaryTree,\ LinkedTernaryTree,\ LinkedTernaryTree)
comment3.text=\n\ Creates\ a\ ternary\ tree\ with\ the\ three\ specified\ subtrees.\n
comment4.params=
comment4.target=java.lang.Object\ getRootElement()
comment4.text=\n\ Returns\ the\ element\ stored\ in\ the\ root\ of\ the\ tree.\ Throws\ an\n\ EmptyCollectionException\ if\ the\ tree\ is\ empty.\n
comment5.params=
comment5.target=LinkedTernaryTree\ getLeft()
comment5.text=\n\ Returns\ the\ left\ subtree\ of\ the\ root\ of\ this\ tree.\n
comment6.params=
comment6.target=LinkedTernaryTree\ getMiddle()
comment6.text=\n\ Returns\ the\ middle\ subtree\ of\ the\ root.\n
comment7.params=
comment7.target=LinkedTernaryTree\ getRight()
comment7.text=\n\ Returns\ the\ right\ subtree\ of\ the\ root.\n
comment8.params=
comment8.target=LinkedTernaryTree\ getChoiceA()
comment8.text=\n\ Returns\ the\ choiceA\ subtree\ of\ the\ root\ of\ this\ tree.\n
comment9.params=
comment9.target=LinkedTernaryTree\ getChoiceB()
comment9.text=\n\ Returns\ the\ choiceB\ subtree\ of\ the\ root\ of\ this\ tree.\n
numComments=21
